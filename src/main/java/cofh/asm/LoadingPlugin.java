package cofh.asm;

import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import net.minecraft.launchwrapper.Launch;
import net.minecraft.launchwrapper.LaunchClassLoader;
import net.minecraftforge.fml.common.DummyModContainer;
import net.minecraftforge.fml.common.FMLLog;
import net.minecraftforge.fml.common.LoadController;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.discovery.ASMDataTable;
import net.minecraftforge.fml.common.event.FMLConstructionEvent;
import net.minecraftforge.fml.relauncher.FMLInjectionData;
import net.minecraftforge.fml.relauncher.IFMLCallHook;
import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin;
import org.apache.logging.log4j.Level;

import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import java.util.zip.ZipEntry;

@IFMLLoadingPlugin.TransformerExclusions ({ "cofh.asm." })
@IFMLLoadingPlugin.SortingIndex (1001)
@IFMLLoadingPlugin.Name ("CoFH Loading Plugin")
public class LoadingPlugin implements IFMLLoadingPlugin, IFMLCallHook {

	public static final String MC_VERSION = "[1.10.2]";
	public static boolean runtimeDeobfEnabled = false;
	public static ASMDataTable ASM_DATA = null;
	public static LaunchClassLoader loader = null;

	public static final String currentMcVersion;
	public static final File minecraftDir;
	public static final boolean obfuscated;

	static {

		boolean obf = true;
		try {
			obf = Launch.classLoader.getClassBytes("net.minecraft.world.World") == null;
		} catch (IOException ignored) {
		}
		obfuscated = obf;
		currentMcVersion = (String) FMLInjectionData.data()[4];
		minecraftDir = (File) FMLInjectionData.data()[6];
		loader = Launch.classLoader;
	}

	@Override
	public String getAccessTransformerClass() {

		return CoFHAccessTransformer.class.getName();
	}

	@Override
	public String[] getASMTransformerClass() {

		return new String[] { "cofh.asm.CoFHClassTransformer", "cofh.asm.repack.codechicken.lib.asm.ClassHierarchyManager" };
	}

	@Override
	public String getModContainerClass() {

		return CoFHDummyContainer.class.getName();
	}

	@Override
	public String getSetupClass() {

		return LoadingPlugin.class.getName();
	}

	@Override
	public void injectData(Map<String, Object> data) {

        loader = (LaunchClassLoader) data.get("classLoader");
		runtimeDeobfEnabled = (Boolean) data.get("runtimeDeobfuscationEnabled");
		if (data.containsKey("coremodLocation")) {
			myLocation = (File) data.get("coremodLocation");
		}
	}

    @Override
    public Void call() throws Exception {

        scanMods();
        return null;
    }


    private void scanMods() {

        File modsDir = new File(minecraftDir, "mods");
        for (File file : modsDir.listFiles()) {
            scanMod(file);
        }
        File versionModsDir = new File(minecraftDir, "mods/" + currentMcVersion);
        if (versionModsDir.exists()) {
            for (File file : versionModsDir.listFiles()) {
                scanMod(file);
            }
        }
    }

    private void scanMod(File file) {

        {
            String name = file.getName().toLowerCase();
            if (file.isDirectory() || !name.endsWith(".jar") && !name.endsWith(".zip")) {
                return;
            }
        }

        try {
            try (JarFile jar = new JarFile(file)) {
                l:
                {
                    Manifest manifest = jar.getManifest();
                    if (manifest == null) {
                        break l;
                    }
                    Attributes attr = manifest.getMainAttributes();
                    if (attr == null) {
                        break l;
                    }

                    String transformers = attr.getValue("CoFHAT");
                    if (transformers != null) {
                        for (String t : transformers.split(" ")) {
                            ZipEntry at = jar.getEntry("META-INF/" + t);
                            if (at != null) {
                                FMLLog.log("CoFHASM", Level.DEBUG, "Adding CoFHAT: " + t + " from: " + file.getName());
                                CoFHAccessTransformer.processATFile(new InputStreamReader(jar.getInputStream(at)));
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {

        }
    }


	public File myLocation;

	public static class CoFHDummyContainer extends DummyModContainer{

		public CoFHDummyContainer() {

			super(new ModMetadata());
			ModMetadata md = getMetadata();
			md.autogenerated = true;
			md.modId = "<CoFH ASM>";
			md.name = md.description = "CoFH ASM";
			md.parent = "CoFHCore";
			md.version = "000";
		}

		@Override
		public boolean registerBus(EventBus bus, LoadController controller) {

			bus.register(this);
			return true;
		}

		@Subscribe
		public void construction(FMLConstructionEvent evt) {

			ASM_DATA = evt.getASMHarvestedData();
			CoFHClassTransformer.scrapeData(ASM_DATA);
		}
	}

}
